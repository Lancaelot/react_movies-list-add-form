{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","initialState","formControls","value","valid","touched","required","initialValues","inputType","type","label","errormessage","NewMovie","state","validURL","url","RegExp","test","validText","text","trim","length","validControl","isValid","validForm","Object","entries","some","entry","handleSubmit","event","preventDefault","props","addMovie","clearForm","setState","onBlurHandler","controlName","formControlCopy","control","typeValue","onChangeHandler","target","renderInputs","keys","index","stateControl","Math","ceil","random","onChange","onBlur","onSubmit","this","disabled","PureComponent","App","moviesFromServer","newMovie","Component","ReactDOM","render","document","getElementById"],"mappings":"6wEAIaA,G,kBAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAaC,EAAvB,EAAuBA,OAAQC,EAA/B,EAA+BA,QAA/B,OACvB,yBAAKC,UAAU,QACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,iBAChB,yBACEC,IAAKH,EACLI,IAAI,gBAIV,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,kBAChB,yBACEC,IAAI,wBACJC,IAAI,WAIV,yBAAKF,UAAU,iBACb,uBAAGA,UAAU,cAAcJ,KAI/B,yBAAKI,UAAU,WACZH,EACD,6BACA,uBAAGM,KAAMJ,GAAT,aAaRJ,EAAUS,aAAe,CACvBP,YAAa,ICxCR,IAAMQ,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACxB,yBAAKN,UAAU,UACZM,EAAOC,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,eAAWC,IAAKD,EAAME,QAAYF,SAgBxCH,EAAWD,aAAe,CACxBE,OAAQ,I,yBCvBJK,EAAe,CACnBC,aAAc,CACZhB,MAAO,CACLiB,MAAO,GACPC,OAAO,EACPC,SAAS,EACTC,UAAU,GAEZnB,YAAa,CACXgB,MAAO,GACPC,OAAO,EACPC,SAAS,EACTC,UAAU,GAEZlB,OAAQ,CACNe,MAAO,GACPC,OAAO,EACPC,SAAS,EACTC,UAAU,GAEZjB,QAAS,CACPc,MAAO,GACPC,OAAO,EACPC,SAAS,EACTC,UAAU,GAEZN,OAAQ,CACNG,MAAO,GACPC,OAAO,EACPC,SAAS,EACTC,UAAU,KAKVC,EAAgB,CACpBL,aAAc,CACZhB,MAAO,CACLsB,UAAW,QACXC,KAAM,OACNC,MAAO,QACPC,aAAc,uBAEhBxB,YAAa,CACXqB,UAAW,WACXC,KAAM,OACNC,MAAO,cACPC,aAAc,6BAEhBvB,OAAQ,CACNoB,UAAW,QACXC,KAAM,MACNC,MAAO,SACPC,aAAc,qBAEhBtB,QAAS,CACPmB,UAAW,QACXC,KAAM,MACNC,MAAO,UACPC,aAAc,qBAEhBX,OAAQ,CACNQ,UAAW,QACXC,KAAM,SACNC,MAAO,SACPC,aAAc,sBA2KLC,E,4MArKbC,M,eACKZ,G,EAGLa,SAAW,SAACC,GAQV,QAPgB,IAAIC,OAAO,wKAKD,KAETC,KAAKF,I,EAGxBG,UAAY,SAACC,GACX,IAAIf,GAAQ,EAMZ,OAJIe,EAAKC,OAAOC,OAAS,GAAKF,EAAKC,OAAOC,OAAS,MACjDjB,GAAQ,GAGHA,G,EAGTkB,aAAe,SAACnB,EAAOG,EAAUD,EAASI,GACxC,IAAIc,GAAU,EAUd,MARa,QAATd,IACFc,EAAU,EAAKT,SAASX,IAGb,SAATM,GAA4B,WAATA,IACrBc,EAAU,EAAKL,UAAUf,IAGpBoB,G,EAGTC,UAAY,SAACX,GACX,OAAQY,OAAOC,QAAQb,GAAOc,MAAK,SAAAC,GAAK,OAAuB,IAAnBA,EAAM,GAAGxB,U,EAGvDyB,aAAe,SAACC,GACdA,EAAMC,iBADkB,MAEgC,EAAKlB,MAArD3B,EAFgB,EAEhBA,MAAOC,EAFS,EAETA,YAAaC,EAFJ,EAEIA,OAAQC,EAFZ,EAEYA,QAASW,EAFrB,EAEqBA,OAE7C,EAAKgC,MAAMC,SACT/C,EACAC,EACAC,EACAC,EACAW,GAEF,EAAKkC,a,EAGPA,UAAY,WACV,EAAKC,SAAL,eACKlC,K,EAIPmC,cAAgB,SAACC,GAEf,IAAMC,EAAe,eAAQ,EAAKzB,MAAMX,cAClCqC,EAAO,eAAQD,EAAgBD,IAC/BG,EAAYjC,EAAcL,aAAamC,GAAa5B,KAE1D8B,EAAQlC,SAAU,EAClBiC,EAAgBD,GAAeE,EAC/BA,EAAQnC,MAAQ,EAAKkB,aACnBiB,EAAQpC,MACRoC,EAAQjC,SACRiC,EAAQlC,QACRmC,GAEF,EAAKL,SAAS,CACZjC,aAAcoC,K,EAIlBG,gBAAkB,SAACX,EAAOO,GAAiB,IAAD,EAElCC,EAAe,eAAQ,EAAKzB,MAAMX,cAClCqC,EAAO,eAAQD,EAAgBD,IAErCE,EAAQpC,MAAQ2B,EAAMY,OAAOvC,MAC7BmC,EAAgBD,GAAeE,EAC/B,EAAKJ,UAAL,mBACGE,EAAcP,EAAMY,OAAOvC,OAD9B,6BAEgBmC,GAFhB,K,EAMFK,aAAe,WACb,OAAOlB,OAAOmB,KAAKrC,EAAcL,cAAcL,KAAI,SAACwC,EAAaQ,GAC/D,IAAMN,EAAUhC,EAAcL,aAAamC,GACrCS,EAAe,EAAKjC,MAAMX,aAAamC,GAE7C,OACE,yBACE/C,UAAU,QACVS,IAAG,UAAKwC,EAAQ7B,OAAb,OAAqBqC,KAAKC,KAAKD,KAAKE,OAAO,QAE9C,+BAAQV,EAAQ7B,OAEQ,UAAtB6B,EAAQ/B,UAEJ,2BACET,IAAG,UAAKwC,EAAQ7B,OAAb,OAAqBqC,KAAKC,KAAKD,KAAKE,OAAO,MAC9CxC,KAAM8B,EAAQ9B,KACdN,MAAO2C,EAAa3C,MACpBC,MAAO0C,EAAa1C,MACpBC,QAASyC,EAAazC,QACtBM,aAAc4B,EAAQ5B,aACtBuC,SAAU,SAAApB,GAAK,OAAI,EAAKW,gBAAgBX,EAAOO,IAC/Cc,OAAQ,SAAArB,GAAK,OAAI,EAAKM,cAAcC,MAItC,8BACEtC,IAAG,UAAKwC,EAAQ7B,OAAb,OAAqBqC,KAAKC,KAAKD,KAAKE,OAAO,MAC9CxC,KAAM8B,EAAQ9B,KACdN,MAAO2C,EAAa3C,MACpBC,MAAO0C,EAAa1C,MACpBC,QAASyC,EAAazC,QACtBM,aAAc4B,EAAQ5B,aACtBuC,SAAU,SAAApB,GAAK,OAAI,EAAKW,gBAAgBX,EAAOO,IAC/Cc,OAAQ,SAAArB,GAAK,OAAI,EAAKM,cAAcC,MAK1CS,EAAa1C,OAAS0C,EAAazC,QAC/B,KACA,8BAAOkC,EAAQ5B,mB,uDAQ3B,OACE,0BAAMrB,UAAU,UAAU8D,SAAUC,KAAKxB,cACtCwB,KAAKV,eACN,4BACErD,UAAU,uBACVmB,KAAK,SACL6C,SACED,KAAK7B,UAAU6B,KAAKxC,MAAMX,eACvB,YALP,kB,GApJeqD,iBCnEVC,EAAb,4MACE3C,MAAQ,CACNjB,OAAQ6D,GAFZ,EAKExB,SAAW,SAAC/C,EAAOC,EAAaC,EAAQC,EAASW,GAE/C,EAAKmC,UAAS,SAACtB,GACb,IAAM6C,EAAW,CACfxE,QACAC,cACAC,SACAC,UACAW,UAGF,MAAO,CAELJ,OAAO,GAAD,mBAAM,EAAKiB,MAAMjB,QAAjB,CAAyB8D,SAlBvC,uDAuBY,IACA9D,EAAWyD,KAAKxC,MAAhBjB,OAER,OACE,yBAAKN,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAYM,OAAQA,KAEtB,yBAAKN,UAAU,WACb,kBAAC,EAAD,CAAU2C,SAAUoB,KAAKpB,iBAhCnC,GAAyB0B,aCDzBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.42cc06e1.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './MovieCard.scss';\r\n\r\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\r\n  <div className=\"card\">\r\n    <div className=\"card-image\">\r\n      <figure className=\"image is-4by3\">\r\n        <img\r\n          src={imgUrl}\r\n          alt=\"Film logo\"\r\n        />\r\n      </figure>\r\n    </div>\r\n    <div className=\"card-content\">\r\n      <div className=\"media\">\r\n        <div className=\"media-left\">\r\n          <figure className=\"image is-48x48\">\r\n            <img\r\n              src=\"images/imdb-logo.jpeg\"\r\n              alt=\"imdb\"\r\n            />\r\n          </figure>\r\n        </div>\r\n        <div className=\"media-content\">\r\n          <p className=\"title is-8\">{title}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"content\">\r\n        {description}\r\n        <br />\r\n        <a href={imdbUrl}>IMDB</a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nMovieCard.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  description: PropTypes.string,\r\n  imgUrl: PropTypes.string.isRequired,\r\n  imdbUrl: PropTypes.string.isRequired,\r\n};\r\n\r\nMovieCard.defaultProps = {\r\n  description: '',\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './MoviesList.scss';\r\nimport { MovieCard } from '../MovieCard';\r\n\r\nexport const MoviesList = ({ movies }) => (\r\n  <div className=\"movies\">\r\n    {movies.map(movie => (\r\n      <MovieCard key={movie.imdbId} {...movie} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nMoviesList.propTypes = {\r\n  movies: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      title: PropTypes.string.isRequired,\r\n      description: PropTypes.string,\r\n      imgUrl: PropTypes.string.isRequired,\r\n      imdbUrl: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n\r\nMoviesList.defaultProps = {\r\n  movies: [],\r\n};\r\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nconst initialState = {\n  formControls: {\n    title: {\n      value: '',\n      valid: false,\n      touched: false,\n      required: true,\n    },\n    description: {\n      value: '',\n      valid: false,\n      touched: false,\n      required: true,\n    },\n    imgUrl: {\n      value: '',\n      valid: false,\n      touched: false,\n      required: true,\n    },\n    imdbUrl: {\n      value: '',\n      valid: false,\n      touched: false,\n      required: true,\n    },\n    imdbId: {\n      value: '',\n      valid: false,\n      touched: false,\n      required: true,\n    },\n  },\n};\n\nconst initialValues = {\n  formControls: {\n    title: {\n      inputType: 'input',\n      type: 'text',\n      label: 'Title',\n      errormessage: 'Enter correct title',\n    },\n    description: {\n      inputType: 'textArea',\n      type: 'text',\n      label: 'Description',\n      errormessage: 'Enter correct description',\n    },\n    imgUrl: {\n      inputType: 'input',\n      type: 'url',\n      label: 'ImgUrl',\n      errormessage: 'Enter correct URL',\n    },\n    imdbUrl: {\n      inputType: 'input',\n      type: 'url',\n      label: 'ImdbUrl',\n      errormessage: 'Enter correct URL',\n    },\n    imdbId: {\n      inputType: 'input',\n      type: 'number',\n      label: 'ImdbId',\n      errormessage: 'Enter correct ID',\n    },\n  },\n};\n\nclass NewMovie extends PureComponent {\n  state = {\n    ...initialState,\n  }\n\n  validURL = (url) => {\n    const pattern = new RegExp('^(https?:\\\\/\\\\/)?'\n      + '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'\n      + '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'\n      + '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'\n      + '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'\n      + '(\\\\#[-a-z\\\\d_]*)?$', 'i');\n\n    return !!pattern.test(url);\n  }\n\n  validText = (text) => {\n    let valid = false;\n\n    if (text.trim().length > 0 && text.trim().length < 240) {\n      valid = true;\n    }\n\n    return valid;\n  }\n\n  validControl = (value, required, touched, type) => {\n    let isValid = true;\n\n    if (type === 'url') {\n      isValid = this.validURL(value);\n    }\n\n    if (type === 'text' || type === 'number') {\n      isValid = this.validText(value);\n    }\n\n    return isValid;\n  }\n\n  validForm = (state) => {\n    return (Object.entries(state).some(entry => entry[1].valid === false));\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { title, description, imgUrl, imdbUrl, imdbId } = this.state;\n\n    this.props.addMovie(\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    );\n    this.clearForm();\n  }\n\n  clearForm = () => {\n    this.setState({\n      ...initialState,\n    });\n  }\n\n  onBlurHandler = (controlName) => {\n    // eslint-disable-next-line\n    const formControlCopy = { ...this.state.formControls };\n    const control = { ...formControlCopy[controlName] };\n    const typeValue = initialValues.formControls[controlName].type;\n\n    control.touched = true;\n    formControlCopy[controlName] = control;\n    control.valid = this.validControl(\n      control.value,\n      control.required,\n      control.touched,\n      typeValue,\n    );\n    this.setState({\n      formControls: formControlCopy,\n    });\n  };\n\n  onChangeHandler = (event, controlName) => {\n    // eslint-disable-next-line\n    const formControlCopy = { ...this.state.formControls };\n    const control = { ...formControlCopy[controlName] };\n\n    control.value = event.target.value;\n    formControlCopy[controlName] = control;\n    this.setState({\n      [controlName]: event.target.value,\n      formControls: formControlCopy,\n    });\n  }\n\n  renderInputs = () => {\n    return Object.keys(initialValues.formControls).map((controlName, index) => {\n      const control = initialValues.formControls[controlName];\n      const stateControl = this.state.formControls[controlName];\n\n      return (\n        <div\n          className=\"field\"\n          key={`${control.label}${Math.ceil(Math.random(100))}`}\n        >\n          <label>{control.label}</label>\n          {\n            control.inputType === 'input'\n              ? (\n                <input\n                  key={`${control.label}${Math.ceil(Math.random(10))}`}\n                  type={control.type}\n                  value={stateControl.value}\n                  valid={stateControl.valid}\n                  touched={stateControl.touched}\n                  errormessage={control.errormessage}\n                  onChange={event => this.onChangeHandler(event, controlName)}\n                  onBlur={event => this.onBlurHandler(controlName)}\n                />\n              )\n              : (\n                <textarea\n                  key={`${control.label}${Math.ceil(Math.random(10))}`}\n                  type={control.type}\n                  value={stateControl.value}\n                  valid={stateControl.valid}\n                  touched={stateControl.touched}\n                  errormessage={control.errormessage}\n                  onChange={event => this.onChangeHandler(event, controlName)}\n                  onBlur={event => this.onBlurHandler(controlName)}\n                />\n              )\n          }\n          {\n            stateControl.valid && stateControl.touched\n              ? null\n              : <span>{control.errormessage}</span>\n          }\n        </div>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <form className=\"ui form\" onSubmit={this.handleSubmit}>\n        {this.renderInputs()}\n        <button\n          className=\"fluid ui button blue\"\n          type=\"submit\"\n          disabled={\n            this.validForm(this.state.formControls)\n            && 'disabled'\n          }\n        >\n          Add Movie\n        </button>\n      </form>\n    );\n  }\n}\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport moviesFromServer from './api/movies.json';\nimport NewMovie from './components/NewMovie/NewMovie';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (title, description, imgUrl, imdbUrl, imdbId) => {\n    // put your code here\n    this.setState((state) => {\n      const newMovie = {\n        title,\n        description,\n        imgUrl,\n        imdbUrl,\n        imdbId,\n      };\n\n      return {\n        // eslint-disable-next-line\n        movies: [...this.state.movies, newMovie],\n      };\n    });\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bulma/css/bulma.css';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}