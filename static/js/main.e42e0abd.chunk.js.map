{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","App","state","moviesFromServer","formControls","value","inputType","type","label","errorMessage","valid","touched","required","addMovie","setState","newMovie","validURL","url","RegExp","test","validText","text","trim","length","validateControl","isValid","validForm","Object","entries","some","entry","handleSubmit","event","preventDefault","onBlurHandler","controlName","formControlCopy","control","onChangeHandler","target","renderInputs","keys","index","onChange","onBlur","this","onSubmit","disabled","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e42e0abd.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './MovieCard.scss';\r\n\r\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\r\n  <div className=\"card\">\r\n    <div className=\"card-image\">\r\n      <figure className=\"image is-4by3\">\r\n        <img\r\n          src={imgUrl}\r\n          alt=\"Film logo\"\r\n        />\r\n      </figure>\r\n    </div>\r\n    <div className=\"card-content\">\r\n      <div className=\"media\">\r\n        <div className=\"media-left\">\r\n          <figure className=\"image is-48x48\">\r\n            <img\r\n              src=\"images/imdb-logo.jpeg\"\r\n              alt=\"imdb\"\r\n            />\r\n          </figure>\r\n        </div>\r\n        <div className=\"media-content\">\r\n          <p className=\"title is-8\">{title}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"content\">\r\n        {description}\r\n        <br />\r\n        <a href={imdbUrl}>IMDB</a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nMovieCard.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  description: PropTypes.string,\r\n  imgUrl: PropTypes.string.isRequired,\r\n  imdbUrl: PropTypes.string.isRequired,\r\n};\r\n\r\nMovieCard.defaultProps = {\r\n  description: '',\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './MoviesList.scss';\r\nimport { MovieCard } from '../MovieCard';\r\n\r\nexport const MoviesList = ({ movies }) => (\r\n  <div className=\"movies\">\r\n    {movies.map(movie => (\r\n      <MovieCard key={movie.imdbId} {...movie} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nMoviesList.propTypes = {\r\n  movies: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      title: PropTypes.string.isRequired,\r\n      description: PropTypes.string,\r\n      imgUrl: PropTypes.string.isRequired,\r\n      imdbUrl: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n\r\nMoviesList.defaultProps = {\r\n  movies: [],\r\n};\r\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbId: '',\n    imdbUrl: '',\n    formControls: {\n      title: {\n        value: '',\n        inputType: 'input',\n        type: 'text',\n        label: 'Title',\n        errorMessage: 'Enter correct title',\n        valid: false,\n        touched: false,\n        required: true,\n      },\n      description: {\n        value: '',\n        inputType: 'textArea',\n        type: 'text',\n        label: 'Description',\n        errorMessage: 'Enter correct description',\n        touched: false,\n        valid: false,\n        required: true,\n      },\n      imgUrl: {\n        value: '',\n        inputType: 'input',\n        type: 'url',\n        label: 'ImgUrl',\n        errorMessage: 'Enter correct URL',\n        touched: false,\n        valid: false,\n        required: true,\n      },\n      imdbUrl: {\n        value: '',\n        inputType: 'input',\n        type: 'url',\n        label: 'ImdbUrl',\n        errorMessage: 'Enter correct Url',\n        touched: false,\n        valid: false,\n        required: true,\n      },\n      imdbId: {\n        value: '',\n        inputType: 'input',\n        type: 'url',\n        label: 'ImdbId',\n        errorMessage: 'Enter correct Url',\n        touched: false,\n        valid: false,\n        required: true,\n      },\n    },\n  };\n\n  addMovie = (title, description, imgUrl, imdbUrl, imdbId) => {\n    // put your code here\n    this.setState((state) => {\n      const newMovie = {\n        title,\n        description,\n        imgUrl,\n        imdbUrl,\n        imdbId,\n      };\n\n      return {\n        // eslint-disable-next-line\n        movies: [...this.state.movies, newMovie],\n      };\n    });\n  };\n\n  validURL = (url) => {\n    const pattern = new RegExp('^(https?:\\\\/\\\\/)?'\n      + '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'\n      + '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'\n      + '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'\n      + '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'\n      + '(\\\\#[-a-z\\\\d_]*)?$', 'i');\n\n    return !!pattern.test(url);\n  }\n\n  validText = (text) => {\n    let valid = false;\n\n    if (text.trim().length > 0 && text.trim().length < 240) {\n      valid = true;\n    }\n\n    return valid;\n  }\n\n  validateControl = (value, required, touched, type) => {\n    let isValid = true;\n\n    if (type === 'url') {\n      isValid = this.validURL(value);\n    }\n\n    if (type === 'text') {\n      isValid = this.validText(value);\n    }\n\n    return isValid;\n  }\n\n  validForm = (state) => {\n    return (Object.entries(state).some(entry => entry[1].valid === false));\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.addMovie(\n      this.state.title,\n      this.state.description,\n      this.state.imgUrl,\n      this.state.imdbUrl,\n      this.state.imdbId,\n    );\n  }\n\n  onBlurHandler = (controlName) => {\n    // eslint-disable-next-line\n    const formControlCopy = { ...this.state.formControls };\n    const control = { ...formControlCopy[controlName] };\n\n    control.touched = true;\n    formControlCopy[controlName] = control;\n    control.valid = this.validateControl(\n      control.value,\n      control.required,\n      control.touched,\n      control.type,\n    );\n    this.setState({\n      formControls: formControlCopy,\n    });\n  };\n\n  onChangeHandler = (event, controlName) => {\n    // eslint-disable-next-line\n    const formControlCopy = { ...this.state.formControls };\n    const control = { ...formControlCopy[controlName] };\n\n    control.value = event.target.value;\n    formControlCopy[controlName] = control;\n    this.setState({\n      [controlName]: event.target.value,\n      formControls: formControlCopy,\n    });\n  }\n\n  renderInputs = () => {\n    return Object.keys(this.state.formControls).map((controlName, index) => {\n      const control = this.state.formControls[controlName];\n\n      return (\n        <div className=\"field\">\n          <label>{control.label}</label>\n          {\n            control.inputType === 'input'\n              ? (\n                <input\n                  key={controlName}\n                  type={control.type}\n                  value={control.value}\n                  valid={control.valid}\n                  touched={control.touched}\n                  errorMessage={control.errorMessage}\n                  onChange={event => this.onChangeHandler(event, controlName)}\n                  onBlur={event => this.onBlurHandler(controlName)}\n                />\n              )\n              : (\n                <textarea\n                  key={controlName}\n                  type={control.type}\n                  value={control.value}\n                  valid={control.valid}\n                  touched={control.touched}\n                  errorMessage={control.errorMessage}\n                  onChange={event => this.onChangeHandler(event, controlName)}\n                  onBlur={event => this.onBlurHandler(controlName)}\n                />\n              )\n          }\n          {\n            control.valid && control.touched\n              ? null\n              : <span>{control.errorMessage}</span>\n          }\n        </div>\n      );\n    });\n  }\n\n  render() {\n    const { movies } = this.state;\n\n    this.renderInputs();\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <form className=\"ui form\" onSubmit={this.handleSubmit}>\n            {this.renderInputs()}\n            <button\n              className=\"ui button\"\n              type=\"submit\"\n              disabled={\n                this.validForm(this.state.formControls)\n                && 'disabled'\n              }\n            >\n              Add Movie\n            </button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bulma/css/bulma.css';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}